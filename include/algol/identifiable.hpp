/* libalgol - a collection of plug-ins for developing back-end C++ web tools
 * Copyright (c) 2013 Algol Labs, LLC.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef H_ALGOL_IDENTIFIABLE_H
#define H_ALGOL_IDENTIFIABLE_H

#include <algol/algol.hpp>
#include <vector>

namespace algol {

  typedef string_t uuid_t;

  /**
   * @class identifiable
   * @brief
   * Identifiable objects are attached with a UUID that's valid across
   * applications across the network.
   */
  class identifiable {
  public:

    identifiable();
    identifiable(uuid_t);
    identifiable(identifiable* parent);
    identifiable& operator=(const identifiable& rhs);
    identifiable(const identifiable& src);
    virtual ~identifiable();

    /*!
     * @brief
     * The UID is a global identifier for _this_ object and you can be assured
     * that no other object has the same UID.
     *
     * This UID is generated by the front-most app.
     *
     * @warning
     * Attempting to re-assign the UID after it's been changed from Unassigned
     * will throw an exception of type "integrity_violation".
     */
    void __set_uuid(uuid_t);
    uuid_t get_uuid() const;

    /**
     * @brief
     * Two identifiables are equal only when their UUIDs match.
     **/
    bool operator==(const identifiable& rhs);

    void __add_child(identifiable*);

  protected:
    string_t      uuid_;

    /** will be invoked once the UUID is set */
    virtual void on_uuid_set();

  private:
    typedef std::vector<identifiable*> children_t;
    children_t    children_;

    void clone(const identifiable& src);
  }; // end of identifiable class
} // end of algol namespace

#endif
